class Solution {
public:
    vector<int> twoSum(vector<int>& nums, int target) {
    for (int i = 0; i < nums.size(); ++i) {
        for (int j = i + 1; j < nums.size(); ++j) {
            if (nums[i] + nums[j] == target) {
                return {i, j};
            }
        }
    }
    return {}; 
}

//Did the first leetcode solution in cpp cuz I didn't know how to change the programming language in the leetcode website.
//My approaches were all huge blunders with using binary search to sort the array and all.
//My senior taunted m by saying "Searching algo se to Tu sorting kr deti h kya hi smjhegi tu"
//All the below code isa huge blunder and I'm just sorry for this.
//And all those comments are my thinking.


public class TwoSum {
    //Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.
    //Input: nums = [2,7,11,15], target = 9
    //Output: [0,1]
    //Explanation: Because nums[0] + nums[1] == 9, we return [0, 1].


/*
    Vector <Integer> TwoSum(Vector<Integer> nums, int target) {
        vector<int> twoSum(vector<int>& nums, int target) {
            int start = 0;
            int end= nums.size() -1;

            if (target> nums[nums.size() - 1]){
                return {};
            }

            while (start <= end) {
                int mid = start + (end - start) / 2;
                int other = mid-1;

                if (target < (nums[mid] + nums[other])) {
                    end = mid - 1;
                } else if (target > (nums[mid]+ nums[other])) {
                    start = mid + 1;
                }else if (nums[mid] > nums[mid + 1]) {
                    end = mid;
                }else if (nums[mid] < nums[mid + 1]){
                    start = mid + 1;
                }
                else {
                    return {mid, mid - 1};
                }
            }
            return (vector<int>&) start;
        }
    };*/


    //only use binary search when the array is sorted and don't overcomplicate the things.
    //its good to use the ordinary approach.

    /*
    Vector<Integer> twoSum(vector<int>& nums, int target) {
        for (int i = 0; i < nums.size(); ++i) {
            for (int j = i + 1; j < nums.size(); ++j) {
                if (nums[i] + nums[j] == target) {
                    return {i, j};
                }
            }
        }
        return {}; // Shouldn't happen if exactly one solution is guaranteed
    }*/

}
